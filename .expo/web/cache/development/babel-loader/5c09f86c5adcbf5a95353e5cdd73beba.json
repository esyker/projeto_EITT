{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Hammer from 'hammerjs';\nimport { MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD, MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD } from \"./constants\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from \"./utils\";\n\nvar PanGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(PanGestureHandler, _DraggingGestureHandl);\n\n  var _super = _createSuper(PanGestureHandler);\n\n  function PanGestureHandler() {\n    _classCallCheck(this, PanGestureHandler);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(PanGestureHandler, [{\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return _objectSpread({}, _get(_getPrototypeOf(PanGestureHandler.prototype), \"getHammerConfig\", this).call(this), {\n        direction: this.getDirection()\n      });\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var config = this.getConfig();\n      var activeOffsetXStart = config.activeOffsetXStart,\n          activeOffsetXEnd = config.activeOffsetXEnd,\n          activeOffsetYStart = config.activeOffsetYStart,\n          activeOffsetYEnd = config.activeOffsetYEnd,\n          minDist = config.minDist;\n      var directions = [];\n      var horizontalDirections = [];\n\n      if (!isnan(minDist)) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n      if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n      if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n      directions = directions.concat(horizontalDirections);\n      var verticalDirections = [];\n      if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n      if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n      if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n      directions = directions.concat(verticalDirections);\n\n      if (!directions.length) {\n        return Hammer.DIRECTION_NONE;\n      }\n\n      if (directions[0] === Hammer.DIRECTION_HORIZONTAL && directions[1] === Hammer.DIRECTION_VERTICAL) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      if (horizontalDirections.length && verticalDirections.length) {\n        return Hammer.DIRECTION_ALL;\n      }\n\n      return directions[0];\n    }\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      if (!this._hasCustomActivationCriteria) {\n        return {\n          minDistSq: 10\n        };\n      }\n\n      return this.config;\n    }\n  }, {\n    key: \"shouldFailUnderCustomCriteria\",\n    value: function shouldFailUnderCustomCriteria(_ref, criteria) {\n      var deltaX = _ref.deltaX,\n          deltaY = _ref.deltaY;\n      return !isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n  }, {\n    key: \"shouldActivateUnderCustomCriteria\",\n    value: function shouldActivateUnderCustomCriteria(_ref2, criteria) {\n      var deltaX = _ref2.deltaX,\n          deltaY = _ref2.deltaY,\n          velocity = _ref2.velocity;\n      return !isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n        x: deltaX,\n        y: deltaY\n      }), criteria.minDistSq) || TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) || TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) || TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq);\n    }\n  }, {\n    key: \"shouldMultiFingerPanFail\",\n    value: function shouldMultiFingerPanFail(_ref3) {\n      var pointerLength = _ref3.pointerLength,\n          scale = _ref3.scale,\n          deltaRotation = _ref3.deltaRotation;\n\n      if (pointerLength <= 1) {\n        return false;\n      }\n\n      var deltaScale = Math.abs(scale - 1);\n      var absDeltaRotation = Math.abs(deltaRotation);\n\n      if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n        return true;\n      }\n\n      if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateHasCustomActivationCriteria\",\n    value: function updateHasCustomActivationCriteria(criteria) {\n      return !isnan(criteria.minDistSq) || !isnan(criteria.minVelocityX) || !isnan(criteria.minVelocityY) || !isnan(criteria.minVelocitySq) || !isnan(criteria.activeOffsetXStart) || !isnan(criteria.activeOffsetXEnd) || !isnan(criteria.activeOffsetYStart) || !isnan(criteria.activeOffsetYEnd);\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(props, recognizer, inputData) {\n      if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n        return {\n          failed: true\n        };\n      }\n\n      var velocity = {\n        x: inputData.velocityX,\n        y: inputData.velocityY\n      };\n\n      if (this._hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n        deltaX: inputData.deltaX,\n        deltaY: inputData.deltaY,\n        velocity: velocity\n      }, props)) {\n        if (this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation\n        })) {\n          return {\n            failed: true\n          };\n        }\n\n        return {\n          success: true\n        };\n      }\n\n      return {\n        success: false\n      };\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return 'pan';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Pan;\n    }\n  }]);\n\n  return PanGestureHandler;\n}(DraggingGestureHandler);\n\nfunction validateConfig() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var isNum = function isNum(v) {\n    return isnan(v) || typeof v === 'number';\n  };\n\n  var isBool = function isBool(v) {\n    return typeof v === 'boolean';\n  };\n\n  var valid = {\n    enabled: isBool,\n    minDistSq: isNum,\n    minVelocityX: isNum,\n    minVelocityY: isNum,\n    minVelocity: isNum,\n    minVelocitySq: isNum,\n    activeOffsetXStart: isNum,\n    activeOffsetXEnd: isNum,\n    failOffsetXStart: isNum,\n    failOffsetXEnd: isNum,\n    activeOffsetYStart: isNum,\n    activeOffsetYEnd: isNum,\n    failOffsetYStart: isNum,\n    failOffsetYEnd: isNum,\n    hasCustomActivationCriteria: isBool,\n    minPointers: isNum,\n    maxPointers: isNum\n  };\n  var keys = Object.keys(valid);\n  var invalidKeys = [];\n\n  for (var _i = 0, _Object$keys = Object.keys(config); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (keys.includes(key)) {\n      if (valid[key](config[key])) {\n        console.warn('Invalid type: ' + key + ': ' + config[key]);\n      }\n    } else {\n      invalidKeys.push(key);\n    }\n  }\n\n  if (invalidKeys.length) {\n    throw new Error('Invalid config props found: ' + invalidKeys.join(', '));\n  }\n\n  return config;\n}\n\nexport default PanGestureHandler;","map":{"version":3,"sources":["C:/Users/diogo/OneDrive/Área de Trabalho/react-native/SuperMarket/node_modules/react-native-gesture-handler/web/PanGestureHandler.js"],"names":["Hammer","MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD","MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD","DraggingGestureHandler","isnan","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","PanGestureHandler","direction","getDirection","config","getConfig","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","minDist","directions","horizontalDirections","DIRECTION_ALL","push","DIRECTION_LEFT","DIRECTION_RIGHT","length","DIRECTION_HORIZONTAL","concat","verticalDirections","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_VERTICAL","DIRECTION_NONE","_hasCustomActivationCriteria","minDistSq","criteria","deltaX","deltaY","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","velocity","x","y","minVelocityX","minVelocityY","minVelocitySq","pointerLength","scale","deltaRotation","deltaScale","Math","abs","absDeltaRotation","props","recognizer","inputData","shouldFailUnderCustomCriteria","failed","velocityX","velocityY","shouldActivateUnderCustomCriteria","shouldMultiFingerPanFail","maxPointers","success","Pan","validateConfig","isNum","v","isBool","valid","enabled","minVelocity","hasCustomActivationCriteria","minPointers","keys","Object","invalidKeys","key","includes","console","warn","Error","join"],"mappings":"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","sourcesContent":["import Hammer from 'hammerjs';\n\nimport {\n  MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD,\n  MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD,\n} from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan, TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass PanGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'pan';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Pan;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      direction: this.getDirection(),\n    };\n  }\n\n  getDirection() {\n    const config = this.getConfig();\n    const {\n      activeOffsetXStart,\n      activeOffsetXEnd,\n      activeOffsetYStart,\n      activeOffsetYEnd,\n      minDist,\n    } = config;\n    let directions = [];\n    let horizontalDirections = [];\n\n    if (!isnan(minDist)) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    if (!isnan(activeOffsetXStart)) horizontalDirections.push(Hammer.DIRECTION_LEFT);\n    if (!isnan(activeOffsetXEnd)) horizontalDirections.push(Hammer.DIRECTION_RIGHT);\n    if (horizontalDirections.length === 2) horizontalDirections = [Hammer.DIRECTION_HORIZONTAL];\n\n    directions = directions.concat(horizontalDirections);\n    let verticalDirections = [];\n\n    if (!isnan(activeOffsetYStart)) verticalDirections.push(Hammer.DIRECTION_UP);\n    if (!isnan(activeOffsetYEnd)) verticalDirections.push(Hammer.DIRECTION_DOWN);\n\n    if (verticalDirections.length === 2) verticalDirections = [Hammer.DIRECTION_VERTICAL];\n\n    directions = directions.concat(verticalDirections);\n\n    if (!directions.length) {\n      return Hammer.DIRECTION_NONE;\n    }\n    if (\n      directions[0] === Hammer.DIRECTION_HORIZONTAL &&\n      directions[1] === Hammer.DIRECTION_VERTICAL\n    ) {\n      return Hammer.DIRECTION_ALL;\n    }\n    if (horizontalDirections.length && verticalDirections.length) {\n      return Hammer.DIRECTION_ALL;\n    }\n\n    return directions[0];\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        minDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  shouldFailUnderCustomCriteria({ deltaX, deltaY }, criteria) {\n    return (\n      (!isnan(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart) ||\n      (!isnan(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd) ||\n      (!isnan(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart) ||\n      (!isnan(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd)\n    );\n  }\n\n  shouldActivateUnderCustomCriteria({ deltaX, deltaY, velocity }, criteria) {\n    return (\n      (!isnan(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart) ||\n      (!isnan(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd) ||\n      (!isnan(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart) ||\n      (!isnan(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: deltaX, y: deltaY }), criteria.minDistSq) ||\n      TEST_MIN_IF_NOT_NAN(velocity.x, criteria.minVelocityX) ||\n      TEST_MIN_IF_NOT_NAN(velocity.y, criteria.minVelocityY) ||\n      TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ(velocity), criteria.minVelocitySq)\n    );\n  }\n\n  shouldMultiFingerPanFail({ pointerLength, scale, deltaRotation }) {\n    if (pointerLength <= 1) {\n      return false;\n    }\n\n    // Test if the pan had too much pinching or rotating.\n    const deltaScale = Math.abs(scale - 1);\n    const absDeltaRotation = Math.abs(deltaRotation);\n    if (deltaScale > MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n    if (absDeltaRotation > MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n      // > If the threshold doesn't seem right.\n      // You can log the value which it failed at here:\n      return true;\n    }\n\n    return false;\n  }\n\n  updateHasCustomActivationCriteria(criteria) {\n    return (\n      !isnan(criteria.minDistSq) ||\n      !isnan(criteria.minVelocityX) ||\n      !isnan(criteria.minVelocityY) ||\n      !isnan(criteria.minVelocitySq) ||\n      !isnan(criteria.activeOffsetXStart) ||\n      !isnan(criteria.activeOffsetXEnd) ||\n      !isnan(criteria.activeOffsetYStart) ||\n      !isnan(criteria.activeOffsetYEnd)\n    );\n  }\n\n  isGestureEnabledForEvent(props, recognizer, inputData) {\n    if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n      return { failed: true };\n    }\n\n    const velocity = { x: inputData.velocityX, y: inputData.velocityY };\n    if (\n      this._hasCustomActivationCriteria &&\n      this.shouldActivateUnderCustomCriteria(\n        { deltaX: inputData.deltaX, deltaY: inputData.deltaY, velocity },\n        props\n      )\n    ) {\n      if (\n        this.shouldMultiFingerPanFail({\n          pointerLength: inputData.maxPointers,\n          scale: inputData.scale,\n          deltaRotation: inputData.deltaRotation,\n        })\n      ) {\n        return {\n          failed: true,\n        };\n      }\n      return { success: true };\n    }\n    return { success: false };\n  }\n}\n\nfunction validateConfig(config = {}) {\n  const isNum = v => isnan(v) || typeof v === 'number';\n  const isBool = v => typeof v === 'boolean';\n\n  const valid = {\n    enabled: isBool,\n    minDistSq: isNum,\n    minVelocityX: isNum,\n    minVelocityY: isNum,\n    // TODO: Bacon: remove `minVelocity`\n    minVelocity: isNum,\n    minVelocitySq: isNum,\n    activeOffsetXStart: isNum,\n    activeOffsetXEnd: isNum,\n    failOffsetXStart: isNum,\n    failOffsetXEnd: isNum,\n    activeOffsetYStart: isNum,\n    activeOffsetYEnd: isNum,\n    failOffsetYStart: isNum,\n    failOffsetYEnd: isNum,\n    hasCustomActivationCriteria: isBool,\n    minPointers: isNum,\n    maxPointers: isNum,\n  };\n  const keys = Object.keys(valid);\n\n  let invalidKeys = [];\n  for (const key of Object.keys(config)) {\n    if (keys.includes(key)) {\n      if (valid[key](config[key])) {\n        console.warn('Invalid type: ' + key + ': ' + config[key]);\n      }\n    } else {\n      invalidKeys.push(key);\n    }\n  }\n\n  if (invalidKeys.length) {\n    throw new Error('Invalid config props found: ' + invalidKeys.join(', '));\n  }\n  return config;\n}\n\nexport default PanGestureHandler;\n"]},"metadata":{},"sourceType":"module"}